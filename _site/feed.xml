<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-02T17:46:31+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Maijs Garais</title><subtitle>Hey there! I&apos;m Maijs - a frontend developer with experience in native Android development, using my technical knowledge to create seamless experiences across platforms. Latvian, based in Northern England.</subtitle><entry><title type="html">Array methods</title><link href="http://localhost:4000/2023/06/26/array-mapping.html" rel="alternate" type="text/html" title="Array methods" /><published>2023-06-26T00:00:00+01:00</published><updated>2023-06-26T00:00:00+01:00</updated><id>http://localhost:4000/2023/06/26/array-mapping</id><content type="html" xml:base="http://localhost:4000/2023/06/26/array-mapping.html"><![CDATA[<blockquote>
  <p>A new coder with spirit, not shy,</p>

  <p>Finds array methods to untie.</p>

  <p>With functions unnamed,</p>

  <p>It’s a game unrestrained,</p>

  <p>But they’ll master it by and by.</p>

  <p>—ChatGPT</p>
</blockquote>

<p>Ah, array methods, beloved. My archnemesis until just a couple months ago. There’s a few concepts to understand before it really “clicks”, so here we go, one at a time.</p>

<h2 id="callback-functions">Callback functions</h2>

<p>If we look at the MDN docs for any of the array methods (I’ll use <code class="language-plaintext highlighter-rouge">Array.prototype.map()</code> as an example), we notice a few terms explaining the parameters for it:</p>

<p><img src="/images/array-mapping/mdn-callback.png" alt="Excerpt from MDN talking about the parameters for Array.map()&quot;" class="img-fluid" /></p>

<p><code class="language-plaintext highlighter-rouge">callbackFn</code> - callback function. In Higher Order Functions (functions which can take other functions as a parameter), the parameters that are functions are called callback functions. Imagine the HOF “calling it back”, being like hey, I’ve done my job, now it’s up to you. The HOF can invoke any of the callback functions provided to it.</p>

<p>The docs state that the callback function passed to <code class="language-plaintext highlighter-rouge">Array.map()</code> is executed for each element in the array and the returned value is added to the new array, which will be returned by <code class="language-plaintext highlighter-rouge">Array.map()</code> itself.</p>

<p>Let’s try writing our own mapping function to see what this really looks like in practice. I’ll add it as a property on the <code class="language-plaintext highlighter-rouge">Array.prototype</code> - doesn’t really matter what a prototype is right now, in short, I am making sure I can call it like <code class="language-plaintext highlighter-rouge">arr.map()</code>, same as the original map function. The <code class="language-plaintext highlighter-rouge">this</code> keyword here refers to the array we call the method on.</p>

<p>For simplicity’s sake, right now I will only care about the first argument that <code class="language-plaintext highlighter-rouge">callbackFn</code> accepts, that is, <code class="language-plaintext highlighter-rouge">element</code> - the current element we are looking at.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">newMap</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">callbackFn</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">newArray</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">newElement</span> <span class="o">=</span> <span class="nx">callbackFn</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
        <span class="nx">newArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">newElement</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">newArray</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Right, let’s try using this new method on an array - don’t worry about the syntax of anything inside the <code class="language-plaintext highlighter-rouge">map</code> or <code class="language-plaintext highlighter-rouge">newMap</code> calls just yet, I just want to show that they both do the same thing.</p>

<p><img src="/images/array-mapping/map-and-newmap.png" alt="&quot;A devtools console showing that the two methods produce the same output, mapping the array's elements to their squares.&quot;" class="img-fluid" /></p>

<p>So far so good. I was trying to square each element of the starting array, and both methods returned the expected result.</p>

<h2 id="okay-but-what-does-callbackfn-look-like-really">Okay, but what does <code class="language-plaintext highlighter-rouge">callbackFn</code> look like really?</h2>

<p>Just like any other function. You just have to remember the parameters it takes - <code class="language-plaintext highlighter-rouge">element</code>, <code class="language-plaintext highlighter-rouge">index</code>, and…. uh whatever the third one was. <code class="language-plaintext highlighter-rouge">array</code>. Right. Never had to use that one, er…. I’ll take a bit of a leap and assume you can not worry about that one either. <code class="language-plaintext highlighter-rouge">element</code> is the current element the mapping function is working on, and <code class="language-plaintext highlighter-rouge">index</code> is its index. So we could define our squaring function as something like</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">squareElement</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">element</span> <span class="o">*</span> <span class="nx">element</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Or, since we are not actually using the <code class="language-plaintext highlighter-rouge">index</code> parameter:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">squareElement</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">element</span> <span class="o">*</span> <span class="nx">element</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">index</code> parameter, if also passed to <code class="language-plaintext highlighter-rouge">squareElement</code>, will just be ignored in the latter case. We can’t, however, just pass one parameter and expect it to be treated as <code class="language-plaintext highlighter-rouge">index</code> not <code class="language-plaintext highlighter-rouge">element</code> - order matters!</p>

<p>Cool, so, since we have a function, we can check that the map method works with it:</p>

<p><img src="/images/array-mapping/map-with-callback.png" alt="&quot;A devtools console showing that the map method works with the function we just defined.&quot;" class="img-fluid" /></p>

<p>Notice how I didn’t put parentheses when I passed <code class="language-plaintext highlighter-rouge">squareElement</code> as a parameter to <code class="language-plaintext highlighter-rouge">map</code>? That’s because I want to pass the entire function, not just the value it would return. <code class="language-plaintext highlighter-rouge">squareElement()</code> would call it and give me its return value. <code class="language-plaintext highlighter-rouge">squareElement</code> passes the function itself. Neat, right?</p>

<h2 id="arrow-functions">Arrow functions</h2>

<p>Small reminder - any function can be written as an arrow function. Let’s make a <code class="language-plaintext highlighter-rouge">squareElementArrow</code> function which does the exact same but in the new syntax:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">squareElementArrow</span> <span class="o">=</span> <span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">element</span> <span class="o">*</span> <span class="nx">element</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We could make it a bit more concise - if an arrow function has a single argument, it doesn’t need parentheses around it, and if the only thing in the body is the return statement, it doesn’t need curly braces nor the <code class="language-plaintext highlighter-rouge">return</code> keyword. So, the more concise version:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">squareElementArrow</span> <span class="o">=</span> <span class="nx">element</span> <span class="o">=&gt;</span> <span class="nx">element</span> <span class="o">*</span> <span class="nx">element</span><span class="p">;</span>
</code></pre></div></div>

<p>Starting to look like you’ve seen the syntax before? Let’s test it out, make sure it again works the same:</p>

<p><img src="/images/array-mapping/map-callback-arrow.png" alt="&quot;A devtools console showing that the map method works the same with the arrow syntax.&quot;" class="img-fluid" /></p>

<p>Perfect. Onto the last piece of the puzzle…</p>

<h2 id="anonymous-functions">Anonymous functions</h2>

<p>Okay, this one will be what ties it all together into the syntax you’re used to seeing in katas. Anonymous functions are functions that are defined without a name - they’ll only need to be used in one place, so there’s no point in assigning them one. Sounding like our squaring functions….?</p>

<p>Let’s see how we could create an anonymous function from our <code class="language-plaintext highlighter-rouge">squareElementArrow</code> function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span> <span class="o">=&gt;</span> <span class="nx">element</span> <span class="o">*</span> <span class="nx">element</span>
</code></pre></div></div>

<p>That simple. Just don’t give it a name, don’t assign it to anything. However, “element” is not very descriptive as a parameter name - if we are squaring something, we are expecting it to be a number. So, new revision:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">num</span> <span class="o">=&gt;</span> <span class="nx">num</span> <span class="o">*</span> <span class="nx">num</span>
</code></pre></div></div>

<p>We could call it anything, <code class="language-plaintext highlighter-rouge">wkdjfkwdjf</code> and it would work the exact same, as, since it is passed to the <code class="language-plaintext highlighter-rouge">map()</code> function, it’ll know that the first parameter the callback function passed to it should take is the current element. So, in the end,</p>

<p><img src="/images/array-mapping/map-anon.png" alt="&quot;A devtools console showing that the map method works the same with the anonymous arrow function.&quot;" class="img-fluid" /></p>

<p>And, just to stress that we don’t <em>have</em> to use the <code class="language-plaintext highlighter-rouge">index</code> element in the body of our callback function and it works just the same, as well as that the parameter names don’t matter but the order does:</p>

<p><img src="/images/array-mapping/map-anon-proof.png" alt="&quot;A devtools console showing that the map method works the same with the anonymous arrow function but different parameter names.&quot;" class="img-fluid" /></p>

<p>And that’s it! Hope that cleared some things up, let me know if you have any questions.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[When the map() isn't clear enough and you need a guide.]]></summary></entry><entry><title type="html">The Simplest Way to Keep Track of Your Tasks</title><link href="http://localhost:4000/2023/02/03/task-tracking.html" rel="alternate" type="text/html" title="The Simplest Way to Keep Track of Your Tasks" /><published>2023-02-03T00:00:00+00:00</published><updated>2023-02-03T00:00:00+00:00</updated><id>http://localhost:4000/2023/02/03/task-tracking</id><content type="html" xml:base="http://localhost:4000/2023/02/03/task-tracking.html"><![CDATA[<p>It is incredibly easy to get lost in a mountainous to-do list as a student.</p>

<p>I mean, we have a schedule for lectures, labs, and tutorials, during which we keep getting new assessments, reading material, reports to write, projects… not to mention revising one’s own notes, which is usually left until right before the exams week, since there’s no time to do it before then. The fact that some of these tasks get forgotten or we misremember an assignment’s deadline is inevitable. Or is it?</p>

<p>Being a good student isn’t about studying excessive amounts of time (in fact, if you decide to grind it out, you’re more likely to only appear productive instead of <em>being</em> productive and therefore fall even further behind - Parkinson’s law!). It isn’t about magically managing to go through all the supplementary material that your professor has ever mentioned either. It is about being able to keep track of what needs to be done, prioritising, having a plan, and then being ready to change said plan when life throws something your way, because it always does.</p>

<p>I recently re-read Cal Newport’s <em>How to Become a Straight-A Student</em>. While most of the book is a bit dated for the digital age and tailored to the American higher education system, it contains a guide for a task management workflow which I’ve used since high school, when I first read it. It is extremely simple, low-effort, and easy to get started with.</p>

<h2 id="the-2-parts-of-the-system">The 2 parts of the system</h2>

<h3 id="the-calendar">The calendar</h3>

<p>The choice as to physical or digital is up to you, as it’s not something the system expects you to have on the go anyway - I’ve used both with success. It does, however, need enough space to record several items per day, and it needs to be accessible to you for a few minutes on a daily basis, preferably either in the morning or evening.</p>

<h3 id="the-list">The list</h3>

<p>Something that you’ll be able to carry around with you all day to jot down whatever comes up. For me, a pen and pocket-sized piece of paper work better than the notes app on my phone, since there’s less friction in getting to writing, but feel free to experiment and find whatever’s easiest for you.</p>

<h2 id="how-it-works">How it works</h2>

<p>If you’re only just starting, put down all the to-dos and deadlines floating around in your brain in the calendar (more on <em>how</em> to do that in a minute). We want to free up space in your brain for studying-related information. You may not be able to do all of this immediately, don’t spend too much time trying to rummage through your brain for some forgotten task that you definitely had. Put down what you remember, the rest will come to you later.</p>

<p>Throughout the day, whenever you get a new task/assignment/deadline, put it down on your list. The next time you look at your calendar (plan for this to happen once daily), transfer the items from your list to the calendar, and take a few minutes to plan the next day. Write down the next day’s plan on the next day’s list - I’ve found that using two columns, one for the day’s plan, another to jot down any new tasks or things to remember, works well.</p>

<p>Don’t overthink about what day you put future items on - of course, you will have things like deadlines that are set in stone, but most other items can be moved around and reorganised - and in fact I encourage you to get comfortable with plans being fluid, even on a daily scale, as things tend to come up and change quite often. Don’t bother with trying to figure out the “optimal” amount of tasks for a future day either, as plans might change. You’ll deal with figuring out how much you can realistically accomplish in the morning of, or the evening before, that day. The rest can be moved, and you shouldn’t assume that every hour that looks free now will stay such.</p>

<p>Another thing I strongly encourage is assigning a specific time and duration to each task, partly to get better at estimating how long things take and how much you can actually accomplish in a day, partly to not let one task expand to fill your whole day. Don’t get into too much detail with it, if you have several small tasks that take only a few minutes, instead of getting very specific with the times and stressing yourself out trying to keep up with them, just group them together, for instance, “11.00-12.15: mail application, buy new pens, get a gift for friend, obtain a copy of registration certificate from university”. Remember to account for commuting, meals, lectures, meetings, and, most importantly, breaks.</p>

<p>Another beautiful thing about this system, asides from its simplicity, is that if for whatver reason you haven’t been keeping track of your to-dos for a while, it’s easy to get back on it. Dump everything on the calendar. Piece of paper. Two columns. You’ve got this.</p>

<h2 id="now-grab-a-piece-of-paper">Now, grab a piece of paper</h2>

<p>Start actually using this system, instead of waiting until something else has been forgotten. Trust me. Less stuff to keep track of in your head and less anxiety about missing something means you have more braincells to spend on everything else.</p>

<p>To help you out, my friend Ron over on <a href="https://noodlesdesigns.gumroad.com/">noodle’s designs</a> has made a <a href="https://noodlesdesigns.gumroad.com/l/daily-planner">template for the daily list</a> to print out or use in Goodnotes. No reason not to get it.</p>

<p>Really, go. Do it.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[You need a piece of paper and two columns.]]></summary></entry></feed>